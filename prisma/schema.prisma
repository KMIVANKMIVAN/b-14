// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id               Int     @id @default(autoincrement())
  nombres          String  @db.VarChar(50)
  apellidos        String  @db.VarChar(50)
  ci               String  @unique @db.VarChar(50)
  complemento      String? @db.VarChar(10)
  correo           String? @unique @db.VarChar(50)
  contrasenia      String  @db.VarChar(100)
  es_activo        Boolean @default(true)
  se_cambiado_cntr Boolean @default(false)

  placa       String  @unique @db.VarChar(9)
  propietario Boolean @default(true)

  fecha_registro      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  id_registrador Int // Campo nuevo y not null

  id_rol Int
  rol    Rol @relation(fields: [id_rol], references: [id])

  marcarParadas MarcarParada[] // Relación uno a muchos con MarcarParada

  id_grupo Int // Campo no nulo
  grupo    Grupo @relation(fields: [id_grupo], references: [id]) // Relación obligatoria con Grupo

  hojasRutas HojaRuta[] // Relación uno a muchos con HojaRutas

  asistencias Asistencia[] // Relación uno a muchos con Asistencia

  @@map("usuarios") // Mapea el nombre de la tabla en la base de datos
}

model Rol {
  id       Int       @id @default(autoincrement())
  rol      String    @db.VarChar(50)
  usuarios Usuario[]

  @@map("roles") // Mapea el nombre de la tabla en la base de datos
}

model Parada {
  id       Int    @id @default(autoincrement())
  parada   String @db.VarChar(50)
  tipo     String @db.VarChar(15)
  latitud  String @db.VarChar(100)
  longitud String @db.VarChar(100)

  fecha_registro      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  id_registrador Int // Campo nuevo y not null

  marcarParadas MarcarParada[] // Relación uno a muchos con MarcarParada

  @@map("paradas") // Mapea el nombre de la tabla en la base de datos
}

model MarcarParada {
  id   Int    @id @default(autoincrement())
  tipo String @db.VarChar(10)

  fecha_registro DateTime @default(now())

  id_usuario Int // Campo nuevo y not null
  id_parada  Int // Campo nuevo y not null

  usuario Usuario @relation(fields: [id_usuario], references: [id]) // Relación con Usuario
  parada  Parada  @relation(fields: [id_parada], references: [id]) // Relación con Parada

  @@map("marcar_paradas") // Mapea el nombre de la tabla en la base de datos
}

model Grupo {
  id    Int    @id @default(autoincrement())
  grupo String @db.VarChar(50)
  nro   String @db.VarChar(10)

  fecha_registro      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  usuarios Usuario[] // Relación uno a muchos con Usuario

  @@map("grupos") // Mapea el nombre de la tabla en la base de datos
}

model HojaRuta {
  id             Int      @id @default(autoincrement())
  monto          Decimal  @db.Decimal(10, 2) // Monto con 2 decimales de precisión
  fecha_registro DateTime @default(now())
  id_registrador Int // Campo nuevo y not null

  id_usuario Int
  usuario    Usuario @relation(fields: [id_usuario], references: [id]) // Relación con Usuario

  @@map("hoja_rutas") // Mapea el nombre de la tabla en la base de datos
}

model Asistencia {
  id             Int      @id @default(autoincrement())
  fecha_registro DateTime @default(now())

  id_usuario Int
  usuario    Usuario @relation(fields: [id_usuario], references: [id]) // Relación con Usuario

  @@map("asistencias") // Mapea el nombre de la tabla en la base de datos
}
